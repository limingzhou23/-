1.堆：
O表示大O,O.表示那个里面有H的字符
用数组或链表实现优先队列： 数组  插入--元素总是插入尾部     O.1
                              删除--查找最大或最小关键字  O.N
                                    从数组中删除需要移动元素 ON
                         链表 插入--元素总是插入链表头部   O.1
                              删除--查找最大或最小关键字    O.N
                                    删去结点            O.1
                         有序数组 插入--找到合适位置   ON/O(Log2N)
                                     移动元素并插入       ON
                                  删除--删去最后一个元素  O.1
                         有序链表 插入--找到合适位置  ON
                                        插入元素     0.1
                                 删除-删除首元素或最后元素  O.1

用二叉树存储：完全二叉树
堆的两个特性：
   结构性：用数组表示的完全二叉树
   有序性：任意结点的关键字是其他子树所有结点的最大值（最小值）
                                          最大堆   最小堆
操作集：最大堆：
创建  一个指针数组
      当前容量
      最大容量
      注意点：堆从下标1开始存储，下标0作为哨兵

插入 从尾部插入 判断是否满足最大堆的要求

删除：取出根结点元素 同时删除堆的一个节点  没看懂循环设置
                                       自己编程尝试
最大堆的建立：堆排序
将已经存在的N个元素按照最大堆的要求存放
（1） 插入操作，依次插入N个元素             时间代价最大为O(NlogN)
(2)线性时间复杂度建立堆           将N个元素按照输入顺序存入 满足完全二叉树结构特征
                                调整二叉树结点
                                调整顺序：倒数第一个有儿子的结点 进行调整
                                       因为这个结点必然满足基本模型 左右都是堆
                                       基本模型：某结点 左子树是个堆 右子树是个堆 如何调整
 
 
 
 2.哈夫曼树
 带权路径长度（WPL)：二叉树有n个叶子节点，每个叶子节点带有权值Wk,
                  从根节点到每个叶子结点的长度为Ik,则每个叶子几点的带权路径长度之和就是：
                  WPL=累加 Wk*Ik
哈夫曼树：WPL最小的二叉树 成为最优二叉树

哈夫曼树的构造：
每次把权值最小的二叉树合并

哈夫曼树特点：没有度为1的结点
             n个叶结点的哈夫曼树有2n-1个结点
             任意叶子节点左右子树交换后仍是哈夫曼树
             对同一组权值 有多种不同构的哈夫曼树
哈夫曼编码：前缀码
          用二叉树进行编码
          根据路径进行编码


3.集合
交 并 补 差 
并查集：集合并，查某元素属于什么集合
       可以用树结构表示集合，树的每个结点表示一个集合元素：双亲表示法，孩子指向双亲
        也可以用数组表示 一列表示数值 一列表示父亲下表
        查找集合中某个数所属集合 就是查找根结点

集合并运算： 小的集合并到大的
           可以在下标一列中用负数表示根结点所在树存在多少个节点
           其他下标都是0-n范围




